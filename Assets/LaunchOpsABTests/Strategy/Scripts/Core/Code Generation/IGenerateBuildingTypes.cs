using JetBrains.Annotations;
using System;
using System.Collections;
using System.Collections.Generic;
using UnityCodeGen;
using UnityEditor;
using UnityEngine;
[Generator]
public class IGenerateBuildingTypes : ICodeGenerator
{
    public void Execute(GeneratorContext context)
    {
        List<string> names = new List<string>() { "None", "Resource", "Barracks" };
     

    }

    public void Generate(GeneratorContext context, List<string> names)
    {
        string typeCode = "";
        foreach (var name in names)
        {
            typeCode += name + ",\n";
        }
        var code =
$@"// <auto-generated/>
public enum BuildingTypes
{{
   {typeCode}
}}";

        context.AddCode("Assets/LaunchOpsABTests/Strategy/Scripts/Buildings/BuildingTypes.cs", code);

    }


    public void GenerateBuildingTypes(GeneratorContext context, List<string> names)
    {
        string typeCode = "";
        foreach (var name in names)
        {
            typeCode += name + ",\n";
        }
        var code =
$@"// <auto-generated/>
public enum BuildingTypes
{{
   {typeCode}
}}";

        context.AddCode("Assets/LaunchOpsABTests/Strategy/Scripts/Buildings/BuildingTypes.cs", code);

    }

}
